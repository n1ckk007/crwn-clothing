{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./userTypes\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from \"./userActions\";\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    // console.log(userRef);\n    //get back our userref and generate the snapshot if we need one\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData); // get the snapshot using user ref\n\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    //create googlesign in pop up in our app\n    //   once user selects right user, we get back user auth obj that has user details on this user key\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    // after our signout comes through yield our put signoutsuccess\n    yield auth.signOut(); // if we succeed\n\n    yield put(signOutSuccess());\n  } catch (error) {\n    // if we fail\n    yield put(signOutFailure(error));\n  }\n} // here we get our usercredentials which we're passing through as the actions payload\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    // create the userAuth with email and password\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password); // if it succeeds and we get back the right obj we call signupsuccess with the user and our additionaldata as the payload inside an obj\n\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    // get back our userAuth obj when we call this method\n    const userAuth = yield getCurrentUser; // if userauth is null / user has never signed in, end the function\n\n    if (!userAuth) return; // if there is a val, call the same getsnapshotfromuser auth except use our userAuth\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/anton/ReactCourse2/crwn-clothing/client/src/redux/user/userSagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signOut","signUp","payload","email","password","displayName","createUserWithEmailAndPassword","signInAfterSignUp","signInWithEmail","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport UserActionTypes from \"./userTypes\";\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfileDocument,\r\n  getCurrentUser,\r\n} from \"../../firebase/firebase.utils\";\r\nimport {\r\n  signInSuccess,\r\n  signInFailure,\r\n  signOutSuccess,\r\n  signOutFailure,\r\n  signUpFailure,\r\n  signUpSuccess,\r\n} from \"./userActions\";\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n  try {\r\n    // console.log(userRef);\r\n    //get back our userref and generate the snapshot if we need one\r\n    const userRef = yield call(\r\n      createUserProfileDocument,\r\n      userAuth,\r\n      additionalData\r\n    );\r\n    // get the snapshot using user ref\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    //create googlesign in pop up in our app\r\n    //   once user selects right user, we get back user auth obj that has user details on this user key\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signOut() {\r\n  try {\r\n    // after our signout comes through yield our put signoutsuccess\r\n    yield auth.signOut();\r\n    // if we succeed\r\n    yield put(signOutSuccess());\r\n  } catch (error) {\r\n    // if we fail\r\n    yield put(signOutFailure(error));\r\n  }\r\n}\r\n\r\n// here we get our usercredentials which we're passing through as the actions payload\r\nexport function* signUp({ payload: { email, password, displayName } }) {\r\n  try {\r\n    // create the userAuth with email and password\r\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n    // if it succeeds and we get back the right obj we call signupsuccess with the user and our additionaldata as the payload inside an obj\r\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\r\n  } catch (error) {\r\n    yield put(signUpFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\r\n  yield getSnapshotFromUserAuth(user, additionalData);\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    // get back our userAuth obj when we call this method\r\n    const userAuth = yield getCurrentUser;\r\n    // if userauth is null / user has never signed in, end the function\r\n    if (!userAuth) return;\r\n    // if there is a val, call the same getsnapshotfromuser auth except use our userAuth\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\nexport function* onSignUpSuccess() {\r\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n    call(onCheckUserSession),\r\n    call(onSignOutStart),\r\n    call(onSignUpStart),\r\n    call(onSignUpSuccess),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}