{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./userTypes\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from \"./userActions\";\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    // console.log(userRef);\n    //get back our userref and generate the snapshot if we need one\n    const userRef = yield call(createUserProfileDocument, userAuth); // get the snapshot using user ref\n\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    //create googlesign in pop up in our app\n    //   once user selects right user, we get back user auth obj that has user details on this user key\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    // get back our userAuth obj when we call this method\n    const userAuth = yield getCurrentUser; // if userauth is null / user has never signed in, end the function\n\n    if (!userAuth) return; // if there is a val, call the same getsnapshotfromuser auth except use our userAuth\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["C:/Users/anton/ReactCourse2/crwn-clothing/src/redux/user/userSagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signOut","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport UserActionTypes from \"./userTypes\";\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfileDocument,\r\n  getCurrentUser,\r\n} from \"../../firebase/firebase.utils\";\r\nimport {\r\n  signInSuccess,\r\n  signInFailure,\r\n  signOutSuccess,\r\n  signOutFailure,\r\n} from \"./userActions\";\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n  try {\r\n    // console.log(userRef);\r\n    //get back our userref and generate the snapshot if we need one\r\n    const userRef = yield call(createUserProfileDocument, userAuth);\r\n    // get the snapshot using user ref\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    //create googlesign in pop up in our app\r\n    //   once user selects right user, we get back user auth obj that has user details on this user key\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signOut() {\r\n  try {\r\n    yield auth.signOut();\r\n    yield put(signOutSuccess());\r\n  } catch (error) {\r\n    yield put(signOutFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    // get back our userAuth obj when we call this method\r\n    const userAuth = yield getCurrentUser;\r\n    // if userauth is null / user has never signed in, end the function\r\n    if (!userAuth) return;\r\n    // if there is a val, call the same getsnapshotfromuser auth except use our userAuth\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_START);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n    call(onCheckUserSession),\r\n    call(onSignOutStart),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}