{"ast":null,"code":"import { createSelector } from \"reselect\";\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector([selectShop], shop => shop.collections);\nexport const selectCollectionsForPreview = createSelector([selectCollections], collections => Object.keys(collections).map(key => collections[key]));\nexport const selectCollection = collectionUrlParam => createSelector([selectCollections], collections => collections[collectionUrlParam]); // // By wrapping this function is memoize, we're saying that whenever this function gets\n// called and receives collectionUrlParam, I want to memoize the return of this function\n// (in this case we return a selector). If this function gets called again with the same\n// collectionUrlParam, don't rerun this function because we'll return the same value as\n// last time, which we've memoized so just return the selector that's been stored.","map":{"version":3,"sources":["C:/Users/anton/ReactCourse2/crwn-clothing/src/redux/shop/shopSelectors.js"],"names":["createSelector","selectShop","state","shop","selectCollections","collections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC;;AAEA,OAAO,MAAMC,iBAAiB,GAAGJ,cAAc,CAC7C,CAACC,UAAD,CAD6C,EAE5CE,IAAD,IAAUA,IAAI,CAACE,WAF8B,CAAxC;AAKP,OAAO,MAAMC,2BAA2B,GAAGN,cAAc,CACvD,CAACI,iBAAD,CADuD,EAEtDC,WAAD,IAAiBE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA8BC,GAAD,IAASL,WAAW,CAACK,GAAD,CAAjD,CAFsC,CAAlD;AAKP,OAAO,MAAMC,gBAAgB,GAAIC,kBAAD,IAC9BZ,cAAc,CACZ,CAACI,iBAAD,CADY,EAEXC,WAAD,IAAiBA,WAAW,CAACO,kBAAD,CAFhB,CADT,C,CAMP;AACA;AACA;AACA;AACA","sourcesContent":["import { createSelector } from \"reselect\";\r\n\r\nconst selectShop = (state) => state.shop;\r\n\r\nexport const selectCollections = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.collections\r\n);\r\n\r\nexport const selectCollectionsForPreview = createSelector(\r\n  [selectCollections],\r\n  (collections) => Object.keys(collections).map((key) => collections[key])\r\n);\r\n\r\nexport const selectCollection = (collectionUrlParam) =>\r\n  createSelector(\r\n    [selectCollections],\r\n    (collections) => collections[collectionUrlParam]\r\n  );\r\n\r\n// // By wrapping this function is memoize, we're saying that whenever this function gets\r\n// called and receives collectionUrlParam, I want to memoize the return of this function\r\n// (in this case we return a selector). If this function gets called again with the same\r\n// collectionUrlParam, don't rerun this function because we'll return the same value as\r\n// last time, which we've memoized so just return the selector that's been stored.\r\n"]},"metadata":{},"sourceType":"module"}