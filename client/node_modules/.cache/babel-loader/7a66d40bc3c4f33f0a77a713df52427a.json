{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport memoize from \"lodash.memoize\";\nexport const selectShop = state => state.shop;\nexport const selectCollections = createSelector([selectShop], shop => shop.collections);\nexport const selectCollectionsForPreview = createSelector([selectCollections], // gets us all of the keys of an object that we pass into and gives it to us in an array format\n// if collections exists then call objectkeys if not return empty version of our collections\ncollections => collections ? Object.keys(collections).map(key => collections[key]) : [] // we want to get all the keys, and then map over that array of keys so we get the value of our collections obj at that key\n);\nexport const selectCollection = memoize(collectionUrlParam => createSelector([selectCollections], // find collection.id matching the url parameter of our collection id map\ncollections => collections ? collections[collectionUrlParam] : null)); // // By wrapping this function is memoize, we're saying that whenever this function gets\n// called and receives collectionUrlParam, I want to memoize the return of this function\n// (in this case we return a selector). If this function gets called again with the same\n// collectionUrlParam, don't rerun this function because we'll return the same value as\n// last time, which we've memoized so just return the selector that's been stored.\n\nexport const selectIsCollectionFetching = createSelector([selectShop], shop => shop.isFetching);\nexport const selectIsCollectionsLoaded = createSelector( // if our collections is loaded we'll get true, otherwise we'll get false\n[selectShop], shop => !!shop.collections);","map":{"version":3,"sources":["C:/Users/anton/ReactCourse2/crwn-clothing/client/src/redux/shop/shopSelectors.js"],"names":["createSelector","memoize","selectShop","state","shop","selectCollections","collections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectIsCollectionFetching","isFetching","selectIsCollectionsLoaded"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC;AAEP,OAAO,MAAMC,iBAAiB,GAAGL,cAAc,CAC7C,CAACE,UAAD,CAD6C,EAE5CE,IAAD,IAAUA,IAAI,CAACE,WAF8B,CAAxC;AAKP,OAAO,MAAMC,2BAA2B,GAAGP,cAAc,CACvD,CAACK,iBAAD,CADuD,EAEvD;AACA;AACCC,WAAD,IACEA,WAAW,GAAGE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA8BC,GAAD,IAASL,WAAW,CAACK,GAAD,CAAjD,CAAH,GAA6D,EALnB,CAMvD;AANuD,CAAlD;AASP,OAAO,MAAMC,gBAAgB,GAAGX,OAAO,CAAEY,kBAAD,IACtCb,cAAc,CACZ,CAACK,iBAAD,CADY,EAEZ;AACCC,WAAD,IAAkBA,WAAW,GAAGA,WAAW,CAACO,kBAAD,CAAd,GAAqC,IAHtD,CADuB,CAAhC,C,CAQP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,0BAA0B,GAAGd,cAAc,CACtD,CAACE,UAAD,CADsD,EAErDE,IAAD,IAAUA,IAAI,CAACW,UAFuC,CAAjD;AAKP,OAAO,MAAMC,yBAAyB,GAAGhB,cAAc,EACrD;AACA,CAACE,UAAD,CAFqD,EAGpDE,IAAD,IAAU,CAAC,CAACA,IAAI,CAACE,WAHoC,CAAhD","sourcesContent":["import { createSelector } from \"reselect\";\r\nimport memoize from \"lodash.memoize\";\r\n\r\nexport const selectShop = (state) => state.shop;\r\n\r\nexport const selectCollections = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.collections\r\n);\r\n\r\nexport const selectCollectionsForPreview = createSelector(\r\n  [selectCollections],\r\n  // gets us all of the keys of an object that we pass into and gives it to us in an array format\r\n  // if collections exists then call objectkeys if not return empty version of our collections\r\n  (collections) =>\r\n    collections ? Object.keys(collections).map((key) => collections[key]) : []\r\n  // we want to get all the keys, and then map over that array of keys so we get the value of our collections obj at that key\r\n);\r\n\r\nexport const selectCollection = memoize((collectionUrlParam) =>\r\n  createSelector(\r\n    [selectCollections],\r\n    // find collection.id matching the url parameter of our collection id map\r\n    (collections) => (collections ? collections[collectionUrlParam] : null)\r\n  )\r\n);\r\n\r\n// // By wrapping this function is memoize, we're saying that whenever this function gets\r\n// called and receives collectionUrlParam, I want to memoize the return of this function\r\n// (in this case we return a selector). If this function gets called again with the same\r\n// collectionUrlParam, don't rerun this function because we'll return the same value as\r\n// last time, which we've memoized so just return the selector that's been stored.\r\n\r\nexport const selectIsCollectionFetching = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.isFetching\r\n);\r\n\r\nexport const selectIsCollectionsLoaded = createSelector(\r\n  // if our collections is loaded we'll get true, otherwise we'll get false\r\n  [selectShop],\r\n  (shop) => !!shop.collections\r\n);\r\n"]},"metadata":{},"sourceType":"module"}