{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyCqhGrrYY-QfqY0xrPLz91fqwfIPAq-WCk\",\n  authDomain: \"crwn-db-7d26b.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-7d26b.firebaseio.com\",\n  projectId: \"crwn-db-7d26b\",\n  storageBucket: \"crwn-db-7d26b.appspot.com\",\n  messagingSenderId: \"160653164597\",\n  appId: \"1:160653164597:web:bbdb3187e943f0cbca317c\",\n  measurementId: \"G-KQ4S8LM34T\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // if there is no userAuth, we want to exit from this function\n  if (!userAuth) return; //if it does exist we query inside of firestore for the document to see if it already exists\n  // console.log(firestore.doc(\"users/1288sdjsadad\"));\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); //console.log(snapShot);\n  // if this snapShot doesn't exist, we'll create data in that place\n\n  if (!snapShot.exists) {\n    // we want displayName and email from userAuth\n    const {\n      displayName,\n      email\n    } = userAuth; //know when we made that document\n\n    const createdAt = new Date();\n\n    try {\n      // .set being the create method, pass in obj where we have displayName, email etc\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config); // export this out anywhere where we need to use anything related to authentication\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // gives access to google auth provider class from authentication library\n\nconst provider = new firebase.auth.GoogleAuthProvider(); //takes custom parameters, always trigger the google pop up whenever we use this google auth provider for auth and sign in\n\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); // takes provider class that we made, we just want the google one\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/anton/ReactCourse2/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E;AACA,MAAI,CAACD,QAAL,EAAe,OAF4D,CAG3E;AACA;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAN2E,CAO3E;AACA;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB;AACA,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B,CAFoB,CAGpB;;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KARD,CAQE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AACD,SAAOf,OAAP;AACD,CA3BM;AA6BPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB,E,CAEA;;AACA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CAEP;;AACA,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB,C,CACA;;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCqhGrrYY-QfqY0xrPLz91fqwfIPAq-WCk\",\r\n  authDomain: \"crwn-db-7d26b.firebaseapp.com\",\r\n  databaseURL: \"https://crwn-db-7d26b.firebaseio.com\",\r\n  projectId: \"crwn-db-7d26b\",\r\n  storageBucket: \"crwn-db-7d26b.appspot.com\",\r\n  messagingSenderId: \"160653164597\",\r\n  appId: \"1:160653164597:web:bbdb3187e943f0cbca317c\",\r\n  measurementId: \"G-KQ4S8LM34T\",\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  // if there is no userAuth, we want to exit from this function\r\n  if (!userAuth) return;\r\n  //if it does exist we query inside of firestore for the document to see if it already exists\r\n  // console.log(firestore.doc(\"users/1288sdjsadad\"));\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapShot = await userRef.get();\r\n  //console.log(snapShot);\r\n  // if this snapShot doesn't exist, we'll create data in that place\r\n  if (!snapShot.exists) {\r\n    // we want displayName and email from userAuth\r\n    const { displayName, email } = userAuth;\r\n    //know when we made that document\r\n    const createdAt = new Date();\r\n    try {\r\n      // .set being the create method, pass in obj where we have displayName, email etc\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\n// export this out anywhere where we need to use anything related to authentication\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n// gives access to google auth provider class from authentication library\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n//takes custom parameters, always trigger the google pop up whenever we use this google auth provider for auth and sign in\r\nprovider.setCustomParameters({ prompt: \"select_account\" });\r\n// takes provider class that we made, we just want the google one\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}