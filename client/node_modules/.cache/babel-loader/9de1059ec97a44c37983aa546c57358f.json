{"ast":null,"code":"// takeevery listens for every action of a specific type that we pass to it\nimport { takeLatest, call, put } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shopTypes\";\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shopActions\"; // all generator functions must have yields in them\n\nexport function* fetchCollectionsAsync() {\n  // functions pause whenever we hit yield until we call .next and our functions continue\n  try {\n    const collectionRef = firestore.collection(\"collections\"); // whenever collectionRef updates or gets run for the first time this collectionRef\n    // will send us the snapshot representing the code of our collections obj array\n\n    const snapshot = yield collectionRef.get(); // when this value comes back it comes back in a promise form that gets resolved with the val of our collectionref which is our snapshot\n    //  call is the code/effect inside our generator function that envokes the function but we want to yield this incase this call takes longer than we expect\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); // put is the saga effect for creating actions/ equiv to dispatch\n\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  // pause whenever a specific action type that we want comes in\n  //   takevery creates a non blocking call in order to not stop our app to continue running other sagas or whatever the user wants to do\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Users/anton/ReactCourse2/crwn-clothing/src/redux/shop/shopSagas.js"],"names":["takeLatest","call","put","ShopActionTypes","convertCollectionsSnapshotToMap","firestore","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SACEC,+BADF,EAEEC,SAFF,QAGO,+BAHP;AAIA,SACEC,uBADF,EAEEC,uBAFF,QAGO,eAHP,C,CAKA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC;AAEA,MAAI;AACF,UAAMC,aAAa,GAAGJ,SAAS,CAACK,UAAV,CAAqB,aAArB,CAAtB,CADE,CAGF;AACA;;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CALE,CAMF;AACA;;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAC/BG,+BAD+B,EAE/BO,QAF+B,CAAjC,CARE,CAYF;;AACA,UAAMT,GAAG,CAACI,uBAAuB,CAACO,cAAD,CAAxB,CAAT;AACD,GAdD,CAcE,OAAOC,KAAP,EAAc;AACd,UAAMZ,GAAG,CAACK,uBAAuB,CAACO,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACvC;AACA;AACA,QAAMhB,UAAU,CACdG,eAAe,CAACc,uBADF,EAEdT,qBAFc,CAAhB;AAID","sourcesContent":["// takeevery listens for every action of a specific type that we pass to it\r\nimport { takeLatest, call, put } from \"redux-saga/effects\";\r\nimport ShopActionTypes from \"./shopTypes\";\r\nimport {\r\n  convertCollectionsSnapshotToMap,\r\n  firestore,\r\n} from \"../../firebase/firebase.utils\";\r\nimport {\r\n  fetchCollectionsSuccess,\r\n  fetchCollectionsFailure,\r\n} from \"./shopActions\";\r\n\r\n// all generator functions must have yields in them\r\nexport function* fetchCollectionsAsync() {\r\n  // functions pause whenever we hit yield until we call .next and our functions continue\r\n\r\n  try {\r\n    const collectionRef = firestore.collection(\"collections\");\r\n\r\n    // whenever collectionRef updates or gets run for the first time this collectionRef\r\n    // will send us the snapshot representing the code of our collections obj array\r\n    const snapshot = yield collectionRef.get();\r\n    // when this value comes back it comes back in a promise form that gets resolved with the val of our collectionref which is our snapshot\r\n    //  call is the code/effect inside our generator function that envokes the function but we want to yield this incase this call takes longer than we expect\r\n    const collectionsMap = yield call(\r\n      convertCollectionsSnapshotToMap,\r\n      snapshot\r\n    );\r\n    // put is the saga effect for creating actions/ equiv to dispatch\r\n    yield put(fetchCollectionsSuccess(collectionsMap));\r\n  } catch (error) {\r\n    yield put(fetchCollectionsFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n  // pause whenever a specific action type that we want comes in\r\n  //   takevery creates a non blocking call in order to not stop our app to continue running other sagas or whatever the user wants to do\r\n  yield takeLatest(\r\n    ShopActionTypes.FETCH_COLLECTIONS_START,\r\n    fetchCollectionsAsync\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}