{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport memoize from \"lodash.memoize\";\nexport const selectShop = state => state.shop;\nexport const selectCollections = createSelector([selectShop], shop => shop.collections);\nexport const selectCollection = memoize(collectionUrlParam => createSelector([selectCollections], // find collection.id matching the url parameter of our collection id map\ncollections => collections[collectionUrlParam])); // // By wrapping this function is memoize, we're saying that whenever this function gets\n// called and receives collectionUrlParam, I want to memoize the return of this function\n// (in this case we return a selector). If this function gets called again with the same\n// collectionUrlParam, don't rerun this function because we'll return the same value as\n// last time, which we've memoized so just return the selector that's been stored.","map":{"version":3,"sources":["C:/Users/anton/ReactCourse2/crwn-clothing/src/redux/shop/shopSelectors.js"],"names":["createSelector","memoize","selectShop","state","shop","selectCollections","collections","selectCollection","collectionUrlParam"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC;AAEP,OAAO,MAAMC,iBAAiB,GAAGL,cAAc,CAC7C,CAACE,UAAD,CAD6C,EAE5CE,IAAD,IAAUA,IAAI,CAACE,WAF8B,CAAxC;AAKP,OAAO,MAAMC,gBAAgB,GAAGN,OAAO,CAAEO,kBAAD,IACtCR,cAAc,CACZ,CAACK,iBAAD,CADY,EAEZ;AACCC,WAAD,IAAiBA,WAAW,CAACE,kBAAD,CAHhB,CADuB,CAAhC,C,CAQP;AACA;AACA;AACA;AACA","sourcesContent":["import { createSelector } from \"reselect\";\r\nimport memoize from \"lodash.memoize\";\r\n\r\nexport const selectShop = (state) => state.shop;\r\n\r\nexport const selectCollections = createSelector(\r\n  [selectShop],\r\n  (shop) => shop.collections\r\n);\r\n\r\nexport const selectCollection = memoize((collectionUrlParam) =>\r\n  createSelector(\r\n    [selectCollections],\r\n    // find collection.id matching the url parameter of our collection id map\r\n    (collections) => collections[collectionUrlParam]\r\n  )\r\n);\r\n\r\n// // By wrapping this function is memoize, we're saying that whenever this function gets\r\n// called and receives collectionUrlParam, I want to memoize the return of this function\r\n// (in this case we return a selector). If this function gets called again with the same\r\n// collectionUrlParam, don't rerun this function because we'll return the same value as\r\n// last time, which we've memoized so just return the selector that's been stored.\r\n"]},"metadata":{},"sourceType":"module"}